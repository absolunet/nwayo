#debug  = require 'gulp-debug'
gulp   = require 'gulp'
rename = require 'gulp-rename'

PATH = global.nwayo.path
ENV  = global.nwayo.env
Util = global.nwayo.util




#-- Lint JS
gulp.task 'scripts_lint', ->
	jshint  = require 'gulp-jshint'
	stylish = require 'jshint-stylish'

	return gulp.src PATH.files.scriptsLint
		.pipe jshint()
		.pipe jshint.reporter(stylish)
		.pipe jshint.reporter('fail')



#-- Convert constants to JS
gulp.task 'scripts_constants', ->
	merge = require 'merge-stream'

	streams = []
	for bname, bundle of ENV.bundles

		data = {
			nwayo:   ENV.pkg.nwayo.version
			project: ENV.pkg.name
			bundle:  bname
			konstan: Util.parseKonstan 'scripts', bundle.output.url
		}

		streams.push(
			Util.vinylStream PATH.filename.konstanScripts, "var konstan = #{JSON.stringify data, null, '\t'};"
				.pipe gulp.dest "#{PATH.dir.cacheScripts}/#{bname}"
		)

	return merge.apply null, streams



#-- Compile
gulp.task 'scripts_compile', ['scripts_lint', 'scripts_constants'], ->
	merge   = require 'merge-stream'
	include = require 'gulp-nwayo-include'
	replace = require 'gulp-replace'
	gulpif  = require 'gulp-if'
	uglify  = require 'gulp-uglify'

	streams = []
	for bname, bundle of ENV.bundles

		# for each collection
		for collection, list of bundle.scripts.collections

			# resolve konstan real filepath
			pos = list.indexOf 'konstan'
			list[pos] = "#{PATH.dir.cacheScripts}/#{bname}/#{PATH.filename.konstan}" if pos isnt -1

			# require each file
			list[i] = "//= require #{item}" for item, i in list
			source = """
				/*!\n * Generated by nwayo #{ENV.pkg.nwayo.version} for #{ENV.pkg.name}:#{bname}\n */\n
				(function(global, undefined) {
					#{list.join '\n'}
				})(typeof window !== 'undefined' ? window : this);
			"""

			streams.push(
				Util.vinylStream "#{collection}.#{PATH.ext.scripts}", source
					.pipe include basePath: './', autoExtension:true
					.pipe gulpif( bundle.scripts.options.minify, uglify(preserveComments:'some') )
					.pipe gulp.dest "#{bundle.output.build}/#{PATH.build.scripts}"
			)

	return merge.apply null, streams



#-- Rebuild
gulp.task 'scripts', (cb) ->
	del         = require 'del'
	runsequence = require 'run-sequence'

	list = []
	list.push "#{bundle.output.build}/#{PATH.build.scripts}", "#{PATH.dir.cacheScripts}/#{bname}" for bname, bundle of ENV.bundles

	del.sync list, force:true
	runsequence 'scripts_compile', cb
