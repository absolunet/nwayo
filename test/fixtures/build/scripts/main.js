/*!
 * @preserve Generated by nwayo 3.5.0-rc.3 for PROJECT_NAME:site
 */

 (function(global, undefined) { 
	//-------------------------------------
	//-- Collection starter kit
	//-------------------------------------
	//-------------------------------------
	//-- Exclusion starter kit
	//-------------------------------------
	
	/* eslint-disable no-unused-vars */
	var define = undefined;
	var require = undefined;
	
	
	/* eslint-disable strict, no-unused-vars, no-redeclare, prefer-destructuring */
	var PROJECT = global.nwayo.project;
	var app = global[PROJECT];
	var konstan = app.konstan;
	
	var DOM_PARSED = global.nwayo.vows.DOMParsed;
	var DOCUMENT_LOADED = global.nwayo.vows.documentLoaded;
	var GLOBAL_JQUERY_LOADED = global.nwayo.vows.globaljqueryLoaded;
	
	var __ = global.nwayo.shortcuts;
	var toolbox = global.nwayo.helpers;
	
	var jQuery = global.nwayo.vendor.jQuery;
	var $ = global.nwayo.vendor.jQuery;
	var _ = global.nwayo.vendor.lodash;
	var Modernizr = global.nwayo.vendor.Modernizr;
	var pinki = global.nwayo.vendor.pinki;

//-------------------------------------
//-- Common
//-------------------------------------
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} //-------------------------------------
//-- Common - Util
//-------------------------------------

(function () {
	'use strict';

	//-- Public class
	app.util = function () {function _class() {_classCallCheck(this, _class);}return _class;}();











































































})();

//-------------------------------------
//-- Common - Base
//-------------------------------------

//= **require bower_components/kafe/dist/kafe
//= **require bower_components/nwayo-toolbox/toolbox/scripts/wrapper/jsrender
var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} //-------------------------------------
//-- Lazyload
//-------------------------------------
var _this = this; //-------------------------------------
//-- Wrapper for imagesLoaded
//-------------------------------------

/* eslint-disable strict */
(function () {

	var ORIGINAL_GLOBAL = global.jQuery;
	_this.jQuery = $;
	/*!
	 * imagesLoaded PACKAGED v4.1.4
	 * JavaScript is all like "You images are done yet or what?"
	 * MIT License
	 */
	
	/**
	 * EvEmitter v1.1.0
	 * Lil' event emitter
	 * MIT License
	 */
	
	/* jshint unused: true, undef: true, strict: true */
	
	( function( global, factory ) {
	  // universal module definition
	  /* jshint strict: false */ /* globals define, module, window */
	  if ( typeof define == 'function' && define.amd ) {
	    // AMD - RequireJS
	    define( 'ev-emitter/ev-emitter',factory );
	  } else if ( typeof module == 'object' && module.exports ) {
	    // CommonJS - Browserify, Webpack
	    module.exports = factory();
	  } else {
	    // Browser globals
	    global.EvEmitter = factory();
	  }
	
	}( typeof window != 'undefined' ? window : this, function() {
	
	
	
	function EvEmitter() {}
	
	var proto = EvEmitter.prototype;
	
	proto.on = function( eventName, listener ) {
	  if ( !eventName || !listener ) {
	    return;
	  }
	  // set events hash
	  var events = this._events = this._events || {};
	  // set listeners array
	  var listeners = events[ eventName ] = events[ eventName ] || [];
	  // only add once
	  if ( listeners.indexOf( listener ) == -1 ) {
	    listeners.push( listener );
	  }
	
	  return this;
	};
	
	proto.once = function( eventName, listener ) {
	  if ( !eventName || !listener ) {
	    return;
	  }
	  // add event
	  this.on( eventName, listener );
	  // set once flag
	  // set onceEvents hash
	  var onceEvents = this._onceEvents = this._onceEvents || {};
	  // set onceListeners object
	  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};
	  // set flag
	  onceListeners[ listener ] = true;
	
	  return this;
	};
	
	proto.off = function( eventName, listener ) {
	  var listeners = this._events && this._events[ eventName ];
	  if ( !listeners || !listeners.length ) {
	    return;
	  }
	  var index = listeners.indexOf( listener );
	  if ( index != -1 ) {
	    listeners.splice( index, 1 );
	  }
	
	  return this;
	};
	
	proto.emitEvent = function( eventName, args ) {
	  var listeners = this._events && this._events[ eventName ];
	  if ( !listeners || !listeners.length ) {
	    return;
	  }
	  // copy over to avoid interference if .off() in listener
	  listeners = listeners.slice(0);
	  args = args || [];
	  // once stuff
	  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];
	
	  for ( var i=0; i < listeners.length; i++ ) {
	    var listener = listeners[i]
	    var isOnce = onceListeners && onceListeners[ listener ];
	    if ( isOnce ) {
	      // remove listener
	      // remove before trigger to prevent recursion
	      this.off( eventName, listener );
	      // unset once flag
	      delete onceListeners[ listener ];
	    }
	    // trigger listener
	    listener.apply( this, args );
	  }
	
	  return this;
	};
	
	proto.allOff = function() {
	  delete this._events;
	  delete this._onceEvents;
	};
	
	return EvEmitter;
	
	}));
	
	/*!
	 * imagesLoaded v4.1.4
	 * JavaScript is all like "You images are done yet or what?"
	 * MIT License
	 */
	
	( function( window, factory ) { 'use strict';
	  // universal module definition
	
	  /*global define: false, module: false, require: false */
	
	  if ( typeof define == 'function' && define.amd ) {
	    // AMD
	    define( [
	      'ev-emitter/ev-emitter'
	    ], function( EvEmitter ) {
	      return factory( window, EvEmitter );
	    });
	  } else if ( typeof module == 'object' && module.exports ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('ev-emitter')
	    );
	  } else {
	    // browser global
	    window.imagesLoaded = factory(
	      window,
	      window.EvEmitter
	    );
	  }
	
	})( typeof window !== 'undefined' ? window : this,
	
	// --------------------------  factory -------------------------- //
	
	function factory( window, EvEmitter ) {
	
	
	
	var $ = window.jQuery;
	var console = window.console;
	
	// -------------------------- helpers -------------------------- //
	
	// extend objects
	function extend( a, b ) {
	  for ( var prop in b ) {
	    a[ prop ] = b[ prop ];
	  }
	  return a;
	}
	
	var arraySlice = Array.prototype.slice;
	
	// turn element or nodeList into an array
	function makeArray( obj ) {
	  if ( Array.isArray( obj ) ) {
	    // use object if already an array
	    return obj;
	  }
	
	  var isArrayLike = typeof obj == 'object' && typeof obj.length == 'number';
	  if ( isArrayLike ) {
	    // convert nodeList to array
	    return arraySlice.call( obj );
	  }
	
	  // array of single index
	  return [ obj ];
	}
	
	// -------------------------- imagesLoaded -------------------------- //
	
	/**
	 * @param {Array, Element, NodeList, String} elem
	 * @param {Object or Function} options - if function, use as callback
	 * @param {Function} onAlways - callback function
	 */
	function ImagesLoaded( elem, options, onAlways ) {
	  // coerce ImagesLoaded() without new, to be new ImagesLoaded()
	  if ( !( this instanceof ImagesLoaded ) ) {
	    return new ImagesLoaded( elem, options, onAlways );
	  }
	  // use elem as selector string
	  var queryElem = elem;
	  if ( typeof elem == 'string' ) {
	    queryElem = document.querySelectorAll( elem );
	  }
	  // bail if bad element
	  if ( !queryElem ) {
	    console.error( 'Bad element for imagesLoaded ' + ( queryElem || elem ) );
	    return;
	  }
	
	  this.elements = makeArray( queryElem );
	  this.options = extend( {}, this.options );
	  // shift arguments if no options set
	  if ( typeof options == 'function' ) {
	    onAlways = options;
	  } else {
	    extend( this.options, options );
	  }
	
	  if ( onAlways ) {
	    this.on( 'always', onAlways );
	  }
	
	  this.getImages();
	
	  if ( $ ) {
	    // add jQuery Deferred object
	    this.jqDeferred = new $.Deferred();
	  }
	
	  // HACK check async to allow time to bind listeners
	  setTimeout( this.check.bind( this ) );
	}
	
	ImagesLoaded.prototype = Object.create( EvEmitter.prototype );
	
	ImagesLoaded.prototype.options = {};
	
	ImagesLoaded.prototype.getImages = function() {
	  this.images = [];
	
	  // filter & find items if we have an item selector
	  this.elements.forEach( this.addElementImages, this );
	};
	
	/**
	 * @param {Node} element
	 */
	ImagesLoaded.prototype.addElementImages = function( elem ) {
	  // filter siblings
	  if ( elem.nodeName == 'IMG' ) {
	    this.addImage( elem );
	  }
	  // get background image on element
	  if ( this.options.background === true ) {
	    this.addElementBackgroundImages( elem );
	  }
	
	  // find children
	  // no non-element nodes, #143
	  var nodeType = elem.nodeType;
	  if ( !nodeType || !elementNodeTypes[ nodeType ] ) {
	    return;
	  }
	  var childImgs = elem.querySelectorAll('img');
	  // concat childElems to filterFound array
	  for ( var i=0; i < childImgs.length; i++ ) {
	    var img = childImgs[i];
	    this.addImage( img );
	  }
	
	  // get child background images
	  if ( typeof this.options.background == 'string' ) {
	    var children = elem.querySelectorAll( this.options.background );
	    for ( i=0; i < children.length; i++ ) {
	      var child = children[i];
	      this.addElementBackgroundImages( child );
	    }
	  }
	};
	
	var elementNodeTypes = {
	  1: true,
	  9: true,
	  11: true
	};
	
	ImagesLoaded.prototype.addElementBackgroundImages = function( elem ) {
	  var style = getComputedStyle( elem );
	  if ( !style ) {
	    // Firefox returns null if in a hidden iframe https://bugzil.la/548397
	    return;
	  }
	  // get url inside url("...")
	  var reURL = /url\((['"])?(.*?)\1\)/gi;
	  var matches = reURL.exec( style.backgroundImage );
	  while ( matches !== null ) {
	    var url = matches && matches[2];
	    if ( url ) {
	      this.addBackground( url, elem );
	    }
	    matches = reURL.exec( style.backgroundImage );
	  }
	};
	
	/**
	 * @param {Image} img
	 */
	ImagesLoaded.prototype.addImage = function( img ) {
	  var loadingImage = new LoadingImage( img );
	  this.images.push( loadingImage );
	};
	
	ImagesLoaded.prototype.addBackground = function( url, elem ) {
	  var background = new Background( url, elem );
	  this.images.push( background );
	};
	
	ImagesLoaded.prototype.check = function() {
	  var _this = this;
	  this.progressedCount = 0;
	  this.hasAnyBroken = false;
	  // complete if no images
	  if ( !this.images.length ) {
	    this.complete();
	    return;
	  }
	
	  function onProgress( image, elem, message ) {
	    // HACK - Chrome triggers event before object properties have changed. #83
	    setTimeout( function() {
	      _this.progress( image, elem, message );
	    });
	  }
	
	  this.images.forEach( function( loadingImage ) {
	    loadingImage.once( 'progress', onProgress );
	    loadingImage.check();
	  });
	};
	
	ImagesLoaded.prototype.progress = function( image, elem, message ) {
	  this.progressedCount++;
	  this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
	  // progress event
	  this.emitEvent( 'progress', [ this, image, elem ] );
	  if ( this.jqDeferred && this.jqDeferred.notify ) {
	    this.jqDeferred.notify( this, image );
	  }
	  // check if completed
	  if ( this.progressedCount == this.images.length ) {
	    this.complete();
	  }
	
	  if ( this.options.debug && console ) {
	    console.log( 'progress: ' + message, image, elem );
	  }
	};
	
	ImagesLoaded.prototype.complete = function() {
	  var eventName = this.hasAnyBroken ? 'fail' : 'done';
	  this.isComplete = true;
	  this.emitEvent( eventName, [ this ] );
	  this.emitEvent( 'always', [ this ] );
	  if ( this.jqDeferred ) {
	    var jqMethod = this.hasAnyBroken ? 'reject' : 'resolve';
	    this.jqDeferred[ jqMethod ]( this );
	  }
	};
	
	// --------------------------  -------------------------- //
	
	function LoadingImage( img ) {
	  this.img = img;
	}
	
	LoadingImage.prototype = Object.create( EvEmitter.prototype );
	
	LoadingImage.prototype.check = function() {
	  // If complete is true and browser supports natural sizes,
	  // try to check for image status manually.
	  var isComplete = this.getIsImageComplete();
	  if ( isComplete ) {
	    // report based on naturalWidth
	    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );
	    return;
	  }
	
	  // If none of the checks above matched, simulate loading on detached element.
	  this.proxyImage = new Image();
	  this.proxyImage.addEventListener( 'load', this );
	  this.proxyImage.addEventListener( 'error', this );
	  // bind to image as well for Firefox. #191
	  this.img.addEventListener( 'load', this );
	  this.img.addEventListener( 'error', this );
	  this.proxyImage.src = this.img.src;
	};
	
	LoadingImage.prototype.getIsImageComplete = function() {
	  // check for non-zero, non-undefined naturalWidth
	  // fixes Safari+InfiniteScroll+Masonry bug infinite-scroll#671
	  return this.img.complete && this.img.naturalWidth;
	};
	
	LoadingImage.prototype.confirm = function( isLoaded, message ) {
	  this.isLoaded = isLoaded;
	  this.emitEvent( 'progress', [ this, this.img, message ] );
	};
	
	// ----- events ----- //
	
	// trigger specified handler for event type
	LoadingImage.prototype.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	LoadingImage.prototype.onload = function() {
	  this.confirm( true, 'onload' );
	  this.unbindEvents();
	};
	
	LoadingImage.prototype.onerror = function() {
	  this.confirm( false, 'onerror' );
	  this.unbindEvents();
	};
	
	LoadingImage.prototype.unbindEvents = function() {
	  this.proxyImage.removeEventListener( 'load', this );
	  this.proxyImage.removeEventListener( 'error', this );
	  this.img.removeEventListener( 'load', this );
	  this.img.removeEventListener( 'error', this );
	};
	
	// -------------------------- Background -------------------------- //
	
	function Background( url, element ) {
	  this.url = url;
	  this.element = element;
	  this.img = new Image();
	}
	
	// inherit LoadingImage prototype
	Background.prototype = Object.create( LoadingImage.prototype );
	
	Background.prototype.check = function() {
	  this.img.addEventListener( 'load', this );
	  this.img.addEventListener( 'error', this );
	  this.img.src = this.url;
	  // check if image is already complete
	  var isComplete = this.getIsImageComplete();
	  if ( isComplete ) {
	    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );
	    this.unbindEvents();
	  }
	};
	
	Background.prototype.unbindEvents = function() {
	  this.img.removeEventListener( 'load', this );
	  this.img.removeEventListener( 'error', this );
	};
	
	Background.prototype.confirm = function( isLoaded, message ) {
	  this.isLoaded = isLoaded;
	  this.emitEvent( 'progress', [ this, this.element, message ] );
	};
	
	// -------------------------- jQuery -------------------------- //
	
	ImagesLoaded.makeJQueryPlugin = function( jQuery ) {
	  jQuery = jQuery || window.jQuery;
	  if ( !jQuery ) {
	    return;
	  }
	  // set local variable
	  $ = jQuery;
	  // $().imagesLoaded()
	  $.fn.imagesLoaded = function( options, callback ) {
	    var instance = new ImagesLoaded( this, options, callback );
	    return instance.jqDeferred.promise( $(this) );
	  };
	};
	// try making plugin
	ImagesLoaded.makeJQueryPlugin();
	
	// --------------------------  -------------------------- //
	
	return ImagesLoaded;
	
	});
	
	


	_this.jQuery = ORIGINAL_GLOBAL;

})();


(function () {
	'use strict';

	var STATUS = 'data-lazyload-status';
	var PREPROCESSED = 'preprocessed';
	var PROCESSING1 = 'processing-start';
	var PROCESSING2 = 'processing-end';
	var PROCESSED = 'processed';


	var local = { types: {} };

	var getOptions = function getOptions(obj) {
		var $obj = $(obj);
		var options = $obj.data('lazyload-options');

		return [$obj, $obj.data('lazyload-options'), $obj.data('lazyload-type') || options.type];
	};




	//-- Bind events once DOM is loaded
	local.bind = function () {
		__.$window.on('changed.zf.mediaquery', function () {
			local.firstPass();
		});
	};


	//-- Preprocess lazyload
	local.preprocess = function () {
		__.$component('lazyload-image').filter(':not([' + STATUS + '])').
		attr(STATUS, PREPROCESSED).
		each(function () {var _getOptions =
			getOptions(this),_getOptions2 = _slicedToArray(_getOptions, 3),$this = _getOptions2[0],options = _getOptions2[1],type = _getOptions2[2];

			if (type) {
				var callback = local.types[type].preprocess;

				if (callback) {
					callback($this, options);
				}
			} else {
				$this.attr(STATUS, PROCESSED);
			}
		});


		pinki.message.publish('nwayo.toolbox.lazyload.preprocess-completed');
	};


	// First pass to queue images
	local.firstPass = function () {
		__.$component('lazyload-image').filter('[' + STATUS + '="' + PREPROCESSED + '"]:visible').
		attr(STATUS, PROCESSING1).
		each(function () {var _getOptions3 =
			getOptions(this),_getOptions4 = _slicedToArray(_getOptions3, 3),$this = _getOptions4[0],options = _getOptions4[1],type = _getOptions4[2];
			var callback = local.types[type].firstPass;

			if (callback) {
				callback($this, options);
			}
		}).
		attr(STATUS, PROCESSING2);


		$('[' + STATUS + '="' + PROCESSING2 + '"]').imagesLoaded({ background: true }).always(local.secondPass);

		pinki.message.publish('nwayo.toolbox.lazyload.firstPass-completed');
	};


	// Second pass once initial batch processed
	local.secondPass = function () {
		__.$component('lazyload-image').filter('[' + STATUS + '="' + PROCESSING2 + '"]:visible').
		attr(STATUS, PROCESSED).
		each(function () {var _getOptions5 =
			getOptions(this),_getOptions6 = _slicedToArray(_getOptions5, 3),$this = _getOptions6[0],options = _getOptions6[1],type = _getOptions6[2];
			var callback = local.types[type].secondPass;

			if (callback) {
				callback($this, options);
			}
		});


		pinki.message.publish('nwayo.toolbox.lazyload.secondPass-completed');
	};





	//-- Public class
	global.nwayo.helpers.lazyload = function () {function _class() {_classCallCheck(this, _class);}_createClass(_class, null, [{ key: 'register',

			// Register new types
			value: function register(types) {
				_.merge(local.types, types);
			} }, { key: 'repass', value: function repass()

			{
				local.firstPass();
			} }]);return _class;}();







	// Outline

	// DOM Ready
	pinki.vow.when(DOM_PARSED).then(function () {
		local.bind();
		local.preprocess();
	});

	// Document loaded
	pinki.vow.when(DOCUMENT_LOADED).then(function () {
		local.firstPass();
	});

})();


(function () {
	'use strict';

	var local = {};


	//-- Cache data instantly
	local.cache = function () {

		/**
                            // JSRender
                            $.views.helpers({
                            	konstan:   (key) => { return _.get(konstan, key); },
                            	translate: (key) => { return app.translation[key]; }
                            });
                            /**/

		/**/
		// Lazyload
		console.log(toolbox);
		toolbox.lazyload.register({
			'image': {
				firstPass: function firstPass($this, options) {
					$this.attr('src', options.url);
				} },


			'bg-image': {
				firstPass: function firstPass($this, options) {
					$this.css('background-image', 'url(\'' + options.url + '\')');
				} },


			'SAMPLE': {
				preprocess: function preprocess($this) {
					setTimeout(function () {$this.addClass('placeholder');}, 1000);
				},
				firstPass: function firstPass($this, options) {
					if (options.url) {
						$this.find(__.component('main-image') + ' > img').attr('src', options.url);
					}
				},
				secondPass: function secondPass($this, options) {
					if (options.hoverUrl && !Modernizr.touchevents) {
						var $hover = $this.find(__.component('main-image'));
						$hover.css('background-image', 'url(\'' + options.hoverUrl + '\')');

						$hover.imagesLoaded({ background: true }).
						then(function () {
							$hover.addClass('hover');
						});

					}
				} } });



		/**/


		// Optional scroll
		app.scrollTransition = Modernizr.touchevents ? 0 : konstan.transition.animation;

	};


	//-- Cache data once DOM is loaded
	local.cacheDOM = function () {

		/**
                               // Translation
                               app.translation = {};
                               $('[data-translation]').each(function() {
                               	$.extend(app.translation, $(this).data('translation'));
                               });
                               /**/


		/**
                                    // tmpl
                                    $('script[type="text/x-jsrender"][id^="jshtml-"]').each(function() {
                                    	const id = $(this).attr('id');
                                    	app.tmpl[`html${_.upperFirst(_.camelCase(id.substring(7)))}`] = $.templates(`#${id}`);
                                    });
                                    /**/

	};


	//-- Bind events once DOM is loaded
	local.bind = function () {

		FastClick.attach(document.body);

		__.$body

		// External links
		.on('click', 'a[data-external]', function () {
			$(this).attr('target', '_blank');
		})


		/**
     // Open links in top window
     .on('click', __.action('open-top'), function() {
     	$(this).attr('target', '_top');
     })
     /**/


		/**
          // Anchors
          .on('click', 'a[data-anchor="true"]', function(e) {
          	e.preventDefault();
          	$.scrollTo($(this).attr('href'), app.scrollTransition, { offset:{ top:-15 } });
          })
          /**/


		/**
               // Simple toggler
               .on('click', `${__.component('toggle-wrapper')} ${__.action('toggle-content')}`, function() {
               	$(this).closest(__.component('toggle-wrapper')).toggleClass('opened');
               })
               /**/;


	};


	//-- Subscribe to topics
	local.subscribe = function () {

		// pinki.message.subscribe('foo.bar', () => {});

	};


	//-- Execute once DOM is loaded
	local.start = function () {

		__.$document.foundation();

		/**
                             // When global jQuery is ready
                             pinki.vow.when(GLOBAL_JQUERY_LOADED).then(([$Global]) => {
                             	$Global().on('click');
                             });
                             /**/

		/**
                                  // Webfont loader
                                  WebFont.load({
                                  	custom:       { families: ['FontName1','FontName2','FontName3'] },
                                  	loading:      () => { __.$body.trigger('WebFont:loading'); },
                                  	active:       () => { __.$body.trigger('WebFont:active'); },
                                  	inactive:     () => { __.$body.trigger('WebFont:inactive'); },
                                  	fontloading:  (familyName, fvd) => { __.$body.trigger('WebFont:loading_font'); },
                                  	fontactive:   (familyName, fvd) => { __.$body.trigger('WebFont:active_font'); },
                                  	fontinactive: (familyName, fvd) => { __.$body.trigger('WebFont:inactive_font'); }
                                  });
                                  		// Fonts loaded
                                  __.$body.on('WebFont:active', () => {
                                  	});
                                  /**/





	};


	//-- Execute once page is loaded
	local.delayedStart = function () {

		__.$body.addClass('document-loaded');

	};






	// Outline
	local.cache();
	local.subscribe();

	// DOM Ready
	pinki.vow.when(DOM_PARSED).then(function () {
		local.cacheDOM();
		local.bind();
		local.start();
	});

	// Document loaded
	pinki.vow.when(DOCUMENT_LOADED).then(function () {
		local.delayedStart();
	});

})();


//-------------------------------------
//-- Form
//-------------------------------------
//-------------------------------------
//-- Form - Base
//-------------------------------------

//= **require bower_components/inputmask/dist/inputmask/inputmask
//= **require bower_components/inputmask/dist/inputmask/inputmask.extensions
//= **require bower_components/inputmask/dist/inputmask/inputmask.date.extensions
//= **require bower_components/inputmask/dist/inputmask/inputmask.numeric.extensions
//= **require bower_components/inputmask/dist/inputmask/inputmask.phone.extensions
//= **require bower_components/inputmask/dist/inputmask/jquery.inputmask

(function () {
	'use strict';

	var local = {};

	//-- Input mask
	var bindInputMask = function bindInputMask() /* $context = __.$body */{

		/**
                                                                        // Numeric
                                                                        $context.find('input[data-mask="numeric-integer"]').inputmask('integer', {
                                                                        	allowPlus:     false,
                                                                        	allowMinus:    false,
                                                                        	min:           1,
                                                                        	integerDigits: 3
                                                                        });
                                                                        	$context.find('input[data-mask="numeric-integer-nomin"]').inputmask('integer', {
                                                                        	allowPlus:     false,
                                                                        	allowMinus:    false,
                                                                        	integerDigits: 3
                                                                        });
                                                                        	$context.find('input[data-mask="numeric-decimal"]').inputmask('decimal', {
                                                                        	allowPlus:     false,
                                                                        	allowMinus:    false,
                                                                        	min:           1,
                                                                        	integerDigits: 5,
                                                                        	digits:        2
                                                                        });
                                                                        	// Phone
                                                                        $context.find('input[type="tel"]').inputmask('(999) 999-9999');
                                                                        $context.find('input[type="tel"][data-mask="ext"]').inputmask('(999) 999-9999 [ext: 99999]');
                                                                        	// Postal code
                                                                        $context.find('input[data-mask="postalcode"]').inputmask('A9A 9A9');
                                                                        	// Date
                                                                        if (!Modernizr.inputtypes.date) {
                                                                        	$context.find('input[type="date"]').inputmask('yyyy-mm-dd', { placeholder:app.env.lang === 'fr' ? 'aaaa-mm-jj' : 'yyyy-mm-dd' });
                                                                        }
                                                                        	// Time
                                                                        $('input[data-mask="time"]').inputmask('hh:mm:ss');
                                                                        	// Credit card
                                                                        $('input[data-mask="credit-card"]').inputmask('9{10}');
                                                                        $('input[data-mask="credit-card-cvv"]').inputmask('9{4}');
                                                                        	/**/








	};


	//-- Numeric keyboard
	var bindNumericKeyboard = function bindNumericKeyboard() /* $context = __.$body */{

		/**
                                                                                    $context.find(`
                                                                                    	input[data-mask="numeric-integer"],
                                                                                    	input[data-mask="numeric-integer-nomin"],
                                                                                    	input[data-mask="credit-card"],
                                                                                    	input[data-mask="credit-card-cvv"]
                                                                                    `)
                                                                                    	.attr('pattern', '\\d*')
                                                                                    ;
                                                                                    /**/
	};


	//-- Form events
	var rebindFormEvent = function rebindFormEvent($context) {
		bindInputMask($context);
		bindNumericKeyboard($context);

		pinki.message.publish(PROJECT + '.form.rebindFormEvent');
	};




	//-- Cache data instantly
	local.cache = function () {

		//

	};


	//-- Cache data once DOM is loaded
	local.cacheDOM = function () {

		//

	};


	//-- Bind events once DOM is loaded
	local.bind = function () {

		rebindFormEvent();

		/*
                     // Bind on text field change
                     $('input:text').on('input paste cut keyup', () => {});
                     /**/

	};


	//-- Subscribe to topics
	local.subscribe = function () {

		/**
                                pinki.message.subscribe('SAMPLE', (msg, data) => {
                                	rebindFormEvent(data.$context);
                                });
                                /**/

	};


	//-- Execute once DOM is loaded
	local.start = function () {

		//

	};


	//-- Execute once page is loaded
	local.delayedStart = function () {

		//

	};






	// Outline
	local.cache();
	local.subscribe();

	// DOM Ready
	pinki.vow.when(DOM_PARSED).then(function () {
		local.cacheDOM();
		local.bind();
		local.start();
	});

	// Document loaded
	pinki.vow.when(DOCUMENT_LOADED).then(function () {
		local.delayedStart();
	});

})();


//-------------------------------------
//-- Site
//-------------------------------------
//-------------------------------------
//-- Site - Base
//-------------------------------------

(function () {
	'use strict';

	var local = {};


	//-- Cache data instantly
	local.cache = function () {

		// Env
		// app.env.isUniquePage = app.env.pageId === 'UID';
		// app.env.isTypePage   = _.includes(app.env.pageTags, 'TYPE-ID');
		// app.env.isOneOfThese = !!_.intersection(app.env.pageTags, ['ID1', 'ID2']).length;

	};


	//-- Cache data once DOM is loaded
	local.cacheDOM = function () {

		//

	};


	//-- Bind events once DOM is loaded
	local.bind = function () {

		//

	};


	//-- Subscribe to topics
	local.subscribe = function () {

		// pinki.message.subscribe('foo.bar',  () => {});

	};


	//-- Execute once DOM is loaded
	local.start = function () {

		//

	};


	//-- Execute once page is loaded
	local.delayedStart = function () {

		//

	};






	// Outline
	local.cache();
	local.subscribe();

	// DOM Ready
	pinki.vow.when(DOM_PARSED).then(function () {
		local.cacheDOM();
		local.bind();
		local.start();
	});

	// Document loaded
	pinki.vow.when(DOCUMENT_LOADED).then(function () {
		local.delayedStart();
	});

})();


 })(typeof window !== 'undefined' ? window : this);
