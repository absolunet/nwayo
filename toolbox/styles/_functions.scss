//-------------------------------------
//-- nwayo - Functions
//-------------------------------------

//-- Foundation's rem-calc asap
@import 'bower_components/foundation-sites/scss/util/unit';



//-- Deep map: Path splitter
@function nwayo-map-deep-split-path($path) {
	$keys:      ();
	$separator: '.';
	$index:     str-index($path, $separator);

	@while $index != null {
		$item:  str-slice($path, 1, $index - 1);
		$keys:  append($keys, $item);
		$path:  str-slice($path, $index + 1);
		$index: str-index($path, $separator);
	}

	@return append($keys, $path);
}

//-- Deep map: Has key
@function nwayo-map-deep-has-key($map, $path) {
	@each $key in nwayo-map-deep-split-path($path) {
		@if map-has-key($map, $key) {
			$map: map-get($map, $key);
		} @else {
			@return false;
		}
	}

	@return true;
}

//-- Deep map: Get value
@function nwayo-map-deep-get($map, $path) {
	@each $key in nwayo-map-deep-split-path($path) {
		@if $map != null {
			@if map-has-key($map, $key) {
				$map: map-get($map, $key);
			} @else {
				$map: null;
			}
		}
	}

	@return $map;
}


// Konstan shortcut: Get value
@function konstan-get($path) {
	@return nwayo-map-deep-get($konstan, $path);
}

// Konstan shortcut: Has key
@function konstan-has-key($path) {
	@return nwayo-map-deep-has-key($konstan, $path);
}






//-- Assets path
@function nwayo-assets-path($file, $context, $type) {
	@if $type == 'images' {
		@return konstan-get('path.images') + '/' + $context + '/' + $file;
	} @else if $type == 'inline' {
		@return konstan-get('path.inline') + '/' + $context + '/' + $file;
	} @else if $type == 'fonts' {
		@return konstan-get('path.fonts') + '/' + $context + '/' + $file;
	}
}

//-- Build path
@function nwayo-build-path($file, $context, $type) {
	@if $type == 'images' {
		@return konstan-get('path.buildroot') + '/images/' + $context + '/' + $file;
	} @else if $type == 'fonts' {
		@return konstan-get('path.buildroot') + '/fonts/' + $context + '/' + $file;
	}
}






//-- String replace
@function nwayo-str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + nwayo-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}

//-- Color replace
@function nwayo-color-replace($string, $source, $target) {
	$string: nwayo-str-replace($string, nwayo-to-string($source), nwayo-to-string($target));
	$string: nwayo-str-replace($string, to-upper-case(nwayo-to-string($source)), nwayo-to-string($target));
	@return $string;
}

//-- Cast to string
@function nwayo-to-string($value) {
	@return inspect($value);
}

//-- Check if list contains value
//     @mixin xyz($options:()) {
//       $a: nwayo-list-contains($options, a);
//       $b: nwayo-list-contains($options, b);
//     }
@function nwayo-list-contains($list, $var) {
	@if (index($list, $var)) {
		@return true;
	}
	@return false;
}






//-- SVG optimized for data-uri (http://codepen.io/Tigt/blog/optimizing-svgs-in-data-uris)
@function nwayo-svg-data-uri($svg) {
	$encoded: '';
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg) / $slice);
	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		$chunk: nwayo-str-replace($chunk, '"', "'");
		$chunk: nwayo-str-replace($chunk, '<', '%3C');
		$chunk: nwayo-str-replace($chunk, '>', '%3E');
		$chunk: nwayo-str-replace($chunk, '&', '%26');
		$chunk: nwayo-str-replace($chunk, '#', '%23');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}
	@return url("data:image/svg+xml;charset=utf8,#{$encoded}");  // stylelint-disable-line string-quotes
}



//-- Get a relative z-index for the scope
@function nwayo-zindex($scopes, $scope, $delta:0) {
	@return map-get($scopes, $scope) + $delta;
}


//-- Simulate a breakpoint
@function nwayo-breakpoint-media($bp, $direction) {
	@if ($direction == up) {
		@return 'screen and (min-width: #{($bp + 1) / $nwayo-basic-size * 1em})';
	} @else if ($direction == down) {
		@return 'screen and (max-width: #{$bp / $nwayo-basic-size * 1em})';
	}
}


//-- Return cache invalidation query string
@function nwayo-cacheinvalidator-querystring($file) {
	@return '?v=' + nwayodart-checksum($file);
}
