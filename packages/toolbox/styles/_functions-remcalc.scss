////
/// nwayo - Functions - rem-calc
/// Shameless copy of Foundation's rem-calc()
/// @link https://github.com/foundation/foundation-sites/blob/v6.7.4/scss/util/_unit.scss Foundation source.
///
/// @group @absolunet/nwayo-toolbox
////

// stylelint-disable -- Foundation code
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';

/// Converts one or more pixel values into matching rem values.
///
/// @requires {Number} $nwayo-basic-size
/// @requires {Function} nwayo-strip-unit
/// @requires {Function} ___-zf-to-rem___
///
/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$global-font-size` variable as the base.
/// @returns {List} A list of converted values.
///
@function rem-calc($values, $base: null) {
	$rem-values: ();
	$count: list.length($values);

	// If no base is defined, defer to the global font size
	@if $base == null {
		$base: $nwayo-basic-size * 1px;
	}

	// If the base font size is a %, then multiply it by 16px
	// This is because 100% font size = 16px in most all browsers
	@if math.unit($base) == '%' {
		$base: math.div($base, 100%) * 16px;
	}

	// Using rem as base allows correct scaling
	@if math.unit($base) == 'rem' {
		$base: nwayo-strip-unit($base) * 16px;
	}

	@if $count == 1 {
		@return ___-zf-to-rem___($values, $base);
	}

	@for $i from 1 through $count {
		$rem-values: list.append($rem-values, ___-zf-to-rem___(list.nth($values, $i), $base));
	}

	@return $rem-values;
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
///
/// @requires {Function} nwayo-strip-unit
///
/// @access private
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
///
@function ___-zf-to-rem___($value, $base: null) {
	$unit-warnings: true;

	// Check if the value is a number
	@if meta.type-of($value) != 'number' {
		@if $unit-warnings {
			@warn meta.inspect($value) + ' was passed to rem-calc(), which is not a number.';
		}
		@return $value;
	}

	// Transform em into rem if someone hands over 'em's
	@if math.unit($value) == 'em' {
		$value: nwayo-strip-unit($value) * 1rem;
	}

	// Calculate rem if units for $value is not rem or em
	@if math.unit($value) != 'rem' {
		$value: math.div(nwayo-strip-unit($value), nwayo-strip-unit($base)) * 1rem;
	}

	// Turn 0rem into 0
	@if $value == 0rem {
		$value: 0;
	}

	@return $value;
}
