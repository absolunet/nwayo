//-------------------------------------
//-- nwayo - rem-calc
//-------------------------------------

//-- Shameless copy of Foundation's rem-calc()
//-- https://github.com/zurb/foundation-sites/blob/v6.5.0/scss/util/_unit.scss



/// Converts one or more pixel values into matching rem values.
///
/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$global-font-size` variable as the base.
///
/// @returns {List} A list of converted values.
@function rem-calc($values, $base: null) {
	$rem-values: ();
	$count: length($values);

	// If no base is defined, defer to the global font size
	@if $base == null {
		$base: $nwayo-basic-size * 1px;  // stylelint-disable-line unit-whitelist
	}

	// If the base font size is a %, then multiply it by 16px
	// This is because 100% font size = 16px in most all browsers
	@if unit($base) == '%' {
		$base: ($base / 100%) * 16px;  // stylelint-disable-line unit-whitelist
	}

	// Using rem as base allows correct scaling
	@if unit($base) == 'rem' {
		$base: strip-unit($base) * 16px;  // stylelint-disable-line unit-whitelist
	}

	@if $count == 1 {
		@return ___-zf-to-rem___($values, $base);
	}

	@for $i from 1 through $count {
		$rem-values: append($rem-values, ___-zf-to-rem___(nth($values, $i), $base));
	}

	@return $rem-values;
}



/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function ___-zf-to-rem___($value, $base: null) {  // stylelint-disable-line scss/at-function-pattern
	// Check if the value is a number
	@if type-of($value) != 'number' {
		@warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
		@return $value;
	}

	// Transform em into rem if someone hands over 'em's
	@if unit($value) == 'em' {
		$value: ___strip-unit___($value) * 1rem;  // stylelint-disable-line unit-whitelist
	}

	// Calculate rem if units for $value is not rem or em
	@if unit($value) != 'rem' {
		$value: ___strip-unit___($value) / ___strip-unit___($base) * 1rem;  // stylelint-disable-line unit-whitelist
	}

	// Turn 0rem into 0
	@if $value == 0rem {  // stylelint-disable-line length-zero-no-unit
		$value: 0;
	}

	@return $value;
}



/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @param {Number} $num - Number to strip unit from.
///
/// @returns {Number} The same number, sans unit.
@function ___strip-unit___($num) {  // stylelint-disable-line scss/at-function-pattern
	@return $num / ($num * 0 + 1);
}
