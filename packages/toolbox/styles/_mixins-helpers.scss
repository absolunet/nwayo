////
/// Nwayo - Mixins - Helpers
/// @group toolbox
/// @since 3.8.2 - TBD - Documentation update
////
@use 'sass:math';


/// Generate Image in ::before/::after pseudo-elements Styles
/// @param {Numbers} $width - Width of the pseudo-elements image
/// @param {Numbers} $height [$width] - height of the pseudo-elements image
/// @output Style of the image in ::before/::after pseudo-elements Styles
@mixin nwayo-pseudo-image-styles($width, $height:$width) {
	content: '';
	width: $width;
	height: $height;
}


/// Generate image which replaces text
/// @param {Numbers} $width - Width of the pseudo-elements image
/// @param {Numbers} $height [$width] - Width of the pseudo-elements image
/// @output Style of the image which replaces text
@mixin nwayo-textreplace-image-styles($width, $height:$width) {
	overflow: hidden;
	width: 0;
	height: 0;
	padding: $height 0 0 $width;
}


/// Clearfix
/// @output Clearfix styles
@mixin nwayo-clearfix-styles {
	&::before, &::after {
		content: '';
		display: table;
	}

	&::after {
		clear: both;
	}
}


/// Visually hidden
/// @return {Styles} Visually hidden styles
@mixin nwayo-visually-hidden-styles {
	position: absolute;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	width: rem-calc(1);
	height: rem-calc(1);
	padding: 0;
	border: 0;
	margin: rem-calc(-1);
}


/// Create a block that scale within a ratio
/// @param {Numbers} $width [2] - Width of the block
/// @param {Numbers} $height [1] - Height of the block
/// @return {Styles} Create a block that scale within a ratio styles
@mixin nwayo-scaling-block-styles($width: 2, $height:1) {
	position: relative;
	display: block;
	height: 0;
	padding-top: math.percentage(math.div($height, $width));

	.scaling-block-content {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}
}


/// Vertical center the child within the parent
/// @output Vertical center the child within the parent styles
@mixin nwayo-valign-parent-styles {
	font-size: 0;  // stylelint-disable-line scale-unlimited/declaration-strict-value

	&::before {
		content: '';
		display: inline-block;
		vertical-align: middle;
		height: 100%;
	}

	.valign-child {
		display: inline-block;
		vertical-align: middle;
	}
}


/// Reset List Styles
/// @output Reset List Styles
@mixin nwayo-list-reset-styles {
	list-style: none;
	padding: 0;
	margin: 0;

	> li {
		margin: 0;
	}
}


/// Reset List Inline Styles
/// @output Reset List Inline Styles
@mixin nwayo-list-inline-styles {
	@include nwayo-list-reset-styles();

	> li {
		display: inline-block;
		vertical-align: top;
	}
}


/// Placeholder - Reversed mixin. Will inject content in the 3 selector
/// @output Placeholder Styles
/// @example scss - Usage Case
/// 	@include nwayo-placeholder-styles {
/// 		color: red;
/// 	}
@mixin nwayo-placeholder-styles() {
	select.placeholder {
		@content;
	}

	input.placeholder {
		@content;
	}

	input::placeholder {
		@content;
	}
}


/// Reset Select Styles - Reversed mixin. Will inject content in the 3 selector
/// @output Reset Select Styles
/// @example scss - Usage Case
/// 	@include nwayo-select-reset-styles {
/// 		color: red;
/// 	}
@mixin nwayo-select-reset-styles() {
	@-moz-document url-prefix() {
		select {
			@content;
		}
	}

	html.lt-ie10 select {
		@content;
	}
}


/// Input type file button - Reversed mixin
/// @output Input type file button Styles
/// @link https://sass-lang.com/documentation/at-rules/mixin#content-blocks Sass Documentation - Content Blocks
/// @example scss - Usage Case
/// 	@include nwayo-input-file-button-styles {
/// 		color: red;
/// 	}
@mixin nwayo-input-file-button-styles() {
	&::-webkit-file-upload-button {
		@content;
	}

	//&::-ms-browse {
	//	@content;
	//}
}


/// Arrow Styles
/// @param {String} $direction [right] - Direction of the arrow (up, down, left, right)
/// @param {Number} $size [.625em] - Size of the arrow
/// @param {Color} $color [$common-text-color] - Color of the arrow
/// @output Arrow Styles
@mixin nwayo-arrow-styles($direction:right, $size:.625em, $color:$common-text-color) {
	display: inline-block;
	border: 0;

	@if $direction == up or $direction == down {
		height: $size;
		border-right: $size solid transparent;
		border-left: $size solid transparent;

		@if $direction == up {
			border-bottom: $size solid $color;
		} @else {
			border-top: $size solid $color;
		}

	} @else if $direction == left or $direction == right {
		width: $size;
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;

		@if $direction == left {
			border-right: $size solid $color;
		} @else {
			border-left: $size solid $color;
		}
	}
}


/// Create a list with columns
/// @param {Number} $nb-column [2]- The number of columns (Min.: 2)
/// @param {Number} $bullet-spacing [1.0625em] - Spacing reserved outside of <li> for a bullet
/// @param {Number} $column-spacing [1.875em] - Spacing between columns
/// @param {Number} $row-spacing [.625em] - Spacing between rows
/// @param {Boolean} $base-style [true] - Wether or not to output base styles (Ex.: set to false in a media query to prevent repeating the styles already defined)
/// @output Create a list with columns Styles
@mixin nwayo-column-list-styles($nb-column:2, $bullet-spacing:1.0625em, $column-spacing:1.875em, $row-spacing:.625em, $base-style:true) {
	// calculate a column offset : $column-spacing * ($column - 1) + $bullet-spacing * $column
	$total-spacing: $column-spacing * ($nb-column - 1) + $bullet-spacing * $nb-column;
	@if $base-style {
		padding-left: 0;
	}
	padding-right: $total-spacing;
	@if $base-style {
		box-sizing: border-box;
		// clearfix
		&::before, &::after {
			content: ' ';
			display: table;
		}

		&::after {
			clear: both;
		}
	}

	> li {
		@if $base-style {
			position: relative;
			float: left;
		}
		width: math.percentage(math.div(1, $nb-column));
		// reset styles for media query usage
		&:nth-of-type(n) {
			left: auto;
			clear: none;
			margin-top: $row-spacing;
		}
		// remove margin from first row
		&:nth-of-type(-n+#{$nb-column}) {
			margin-top: 0;
		}
		// clear rows
		&:nth-of-type(#{$nb-column}n+1) {
			clear: both;
		}
		// column offsets
		@for $i from 1 through $nb-column - 1 {
			&:nth-of-type(#{$nb-column}n-#{($i)}) {
				left: $column-spacing * ($nb-column - $i - 1) + $bullet-spacing * ($nb-column - $i);
			}
		}

		&:nth-of-type(#{$nb-column}n) {
			left: $total-spacing;
		}
	}
}
