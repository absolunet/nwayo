////
/// nwayo - Functions - Helpers
///
/// @group @absolunet/nwayo-toolbox
////

@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";

/// Extract levels of a dot notation path.
///
/// @param {String} $path - Path in dot notation.
/// @returns {List<String>} Levels.
///
@function nwayo-map-deep-split-path($path) {
	$keys: ();
	$separator: ".";
	$index: string.index($path, $separator);

	@while $index {
		$item: string.slice($path, 1, $index - 1);
		$keys: list.append($keys, $item);
		$path: string.slice($path, $index + 1);
		$index: string.index($path, $separator);
	}

	@return list.append($keys, $path);
}

/// Check if a path exists in a map.
///
/// @requires {Function} nwayo-map-deep-split-path
///
/// @param {Map<String,*>} $map - Map to query.
/// @param {String} $path - Path in dot notation.
/// @returns {Boolean} If path exists in map.
///
@function nwayo-map-deep-has-key($map, $path) {
	@each $key in nwayo-map-deep-split-path($path) {
		@if map.has-key($map, $key) {
			$map: map.get($map, $key);
		} @else {
			@return false;
		}
	}

	@return true;
}

/// Get a map value via a dot notation path.
///
/// @requires {Function} nwayo-map-deep-split-path
///
/// @param {Map<String,*>} $map - Map to query.
/// @param {String} $path - Path in dot notation.
/// @returns {*} The value.
///
@function nwayo-map-deep-get($map, $path) {
	@each $key in nwayo-map-deep-split-path($path) {
		@if $map {
			@if map.has-key($map, $key) {
				$map: map.get($map, $key);
			} @else {
				$map: null;
			}
		}
	}

	@return $map;
}

/// Replace all occurrences of the search text with the replacement text.
///
/// @requires {Function} nwayo-str-replace
///
/// @param {String} $subject - Text to search within.
/// @param {String} $search - Text to find.
/// @param {String} $replace [""] - Text to replace the occurences.
/// @returns {String} Replaced text.
///
@function nwayo-str-replace($subject, $search, $replace: "") {
	$index: string.index($subject, $search);

	@if $index {
		// stylelint-disable-next-line scss/operator-no-newline-after -- Prettier
		@return string.slice($subject, 1, $index - 1) + $replace +
			nwayo-str-replace(string.slice($subject, $index + string.length($search)), $search, $replace);
	}

	@return $subject;
}

/// Cast to string.
///
/// @param {*} $value - Value to cast.
/// @returns {String} Value in string format.
///
@function nwayo-to-string($value) {
	@return meta.inspect($value);
}

/// Remove unit from a numeric value.
///
/// @access private
/// @param {Number} $value - Value to strip unit from.
/// @returns {Number} Value without unit.
///
@function nwayo-strip-unit($value) {
	@return math.div($value, $value * 0 + 1);
}

/// Check if a list contains a value.
///
/// @param {List} $list - List to check.
/// @param {*} $value - Value to find.
/// @returns {Boolean} If list contains value.
///
@function nwayo-list-contains($list, $value) {
	@if list.index($list, $value) {
		@return true;
	}

	@return false;
}

/// Serialize value to a string.
///
/// @param {*} $value - Value to serialize.
/// @returns {String} Serialized value.
///
@function nwayo-serialize($value) {
	$serialized: "";

	// List
	@if meta.type-of($value) == "list" {
		$serialized: "#{list.join($value, (), $separator: comma)}";

		// Map
	} @else if meta.type-of($value) == "map" {
		$list: ();

		@each $key, $item in $value {
			$list: list.append($list, $key + ":" + $item);
		}

		$serialized: "#{list.join($list, (), $separator: comma)}";

		// Plain
	} @else {
		$serialized: "#{$value}";
	}

	@return $serialized;
}
