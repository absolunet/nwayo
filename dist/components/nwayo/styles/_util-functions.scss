//-------------------------------------
//-- Utils: Functions
//-------------------------------------

//-- Assets path
@function assets-path($file, $context, $type) {
	@if $type == 'images' {
		@return $konstan-path-images + '/' + $context + '/' + $file;
	} @else if $type == 'inline' {
		@return $konstan-path-inline + '/' + $context + '/' + $file;
	} @elseif $type == 'fonts' {
		@return $konstan-path-fonts + '/' + $context + '/' + $file;
	}
}




//-- String replace
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}

//-- Color replace
@function color-replace($string, $source, $target) {
	$string: str-replace($string, to-string($source), to-string($target));
	$string: str-replace($string, to-upper-case(to-string($source)), to-string($target));
	@return $string;
}

//-- Cast to string
@function to-string($value) {
	@return inspect($value);
}




//-- SVG optimized for data-uri (http://codepen.io/Tigt/blog/optimizing-svgs-in-data-uris)
@function svg-data-uri($svg) {
	$encoded: '';
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg) / $slice);
	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		$chunk: str-replace($chunk, '"', "'");
		$chunk: str-replace($chunk, '<', '%3C');
		$chunk: str-replace($chunk, '>', '%3E');
		$chunk: str-replace($chunk, '&', '%26');
		$chunk: str-replace($chunk, '#', '%23');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}
	@return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}
